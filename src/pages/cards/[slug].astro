---
// Imports
import Layout from "../../layout/layout.astro";
import Pagesection from "../../components/sections/pagesection.astro";
import { query } from "../../lib/db";

import { parseCostToIcons } from "../../js/custom";
import { parseRichText } from "../../js/custom";

export const prerender = false;

// Build-time paths
export async function getStaticPaths() {
  const cards = await query("SELECT slug FROM cards"); // change 'cards' to your table name
  return cards.map((card) => ({
    params: { slug: card.slug },
  }));
}

// Get data for a specific slug
const { slug } = Astro.params;
const cards = await query("SELECT * FROM cards WHERE slug = $1 LIMIT 1", [
  slug,
]);
const card = cards[0];

if (!card) {
  throw new Error(`Card with slug "${slug}" not found`);
}
---

<Layout>
  <Pagesection size="md">
    <div class="wrapper">
      <div class="col min-w-320">
        <img
          src={card.image}
          alt={card.name || "Guardian Card"}
          width="300"
          height="300"
          class="card-image"
          loading="lazy"
          decoding="async"
        />
      </div>
      <div class="col min-w-320">
        <h2>{card.name}</h2>

        <p>
          <strong>Cost:</strong>
          {
            parseCostToIcons(card.cost).map(({ src, alt, key }) => (
              <img src={src} alt={alt} class="icon" key={key} />
            ))
          }
          {card.converted && <span class="small-text">({card.converted})</span>}
        </p>
        <p>
          {card.type}
          {card.subtype && ` - ${card.subtype}`}
          {card.supertype && ` - ${card.supertype}`}
          {card.element && ` ${card.element}`}
        </p>
        <p>
          {card.combat}
        </p>
        <p class="card-text" set:html={parseRichText(card.text)} />
        <div class="wrapper mb-2">
          <div class="col">
            {
              card.life !== undefined && card.life !== null && (
                <span>
                  <strong>Life: </strong> {card.life}
                </span>
              )
            }
          </div>
          <div class="col">
            {
              card.mana !== undefined && card.mana !== null && (
                <span>
                  <strong>Mana: </strong> {card.mana}
                </span>
              )
            }
          </div>
        </div>
        <div class="wrapper mb-2">
          <div class="col">
            {
              card.attack !== undefined && card.attack !== null && (
                <span>
                  <strong>Attack: </strong> {card.attack}
                </span>
              )
            }
          </div>
          <div class="col">
            {
              card.defense !== undefined && card.defense !== null && (
                <span>
                  <strong>Defense: </strong> {card.defense}
                </span>
              )
            }
          </div>
        </div>
        <div class="wrapper mb-2">
          <div class="col">
            {
              card.magic !== undefined && card.magic !== null && (
                <span>
                  <strong>Magic: </strong> {card.magic}
                </span>
              )
            }
          </div>
          <div class="col">
            {
              card.resistance !== undefined && card.resistance !== null && (
                <span>
                  <strong>Resistance: </strong> {card.resistance}
                </span>
              )
            }
          </div>
        </div>
        <p>
          {
            card.movement !== undefined && card.movement !== null && (
              <span>
                <strong>Move:</strong> {card.movement}
              </span>
            )
          }
        </p>

        <p>
          <strong>Limitation: </strong>
          {card.limitation && `${card.limitation}, `}
          {card.rarity}
        </p>
      </div>
    </div>
  </Pagesection>
</Layout>

<style>
  .card-image {
    width: 100%;
    max-width: 400px; /* Cap image size for single page view */
    height: auto;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease-in-out;
  }

  .card-text {
    border: solid 1px hsl(0 0 100 / 0.3);
    padding: 1rem;
  }

  .small-text {
    font-size: 0.8rem;
    color: hsl(0 0 100 / 0.6);
  }

  .wrapper {
    flex-wrap: wrap;
  }

  .col.min-w-320 {
    min-width: 320px;
  }

  .icon {
    width: 24px;
    height: 24px;
    display: inline-block;
    margin-right: 4px;
    vertical-align: middle;
  }

  .card-text strong {
    font-weight: bold;
  }

  .card-text em {
    font-style: italic;
  }

  .inline-icon {
    height: 1em;
    vertical-align: middle;
  }
</style>
